[
  {
    "objectID": "ch_1.html",
    "href": "ch_1.html",
    "title": "1Â  init.el",
    "section": "",
    "text": "This is init.el configuration for Emacs on MacOS using Org-roam.\nWe can save this directly as ~/.emacs.d/init.el file.\n;;;;;;;;;;;;;;;;;;;;;;;;\n;; Emacs init.el\n;; Platform: MacOSX\n;; Author: Moinul Islam\n;;;;;;;;;;;;;;;;;;;;;;;\n\n;; -----------------------------------------------\n;; Package Manager Setup (package.el + use-package)\n;; -----------------------------------------------\n(require 'package)\n(setq package-archives\n       '((\"melpa\"       . \"https://melpa.org/packages/\")\n        (\"melpa-stable\" . \"https://stable.melpa.org/packages/\")\n        (\"gnu\"          . \"https://elpa.gnu.org/packages/\")\n        (\"nongnu\"       . \"https://elpa.nongnu.org/nongnu/\")\n        (\"org\"          . \"https://orgmode.org/elpa/\")))\n(package-initialize)\n(unless package-archive-contents\n  (package-refresh-contents))\n\n(unless (package-installed-p 'use-package)\n  (package-install 'use-package))\n(eval-when-compile\n  (require 'use-package))\n(setq use-package-always-ensure t)\n\n;; -----------------------------------\n;; Save customization to separate file\n;; -----------------------------------\n(setq custom-file (expand-file-name \"custom.el\" user-emacs-directory))\n(load custom-file 'noerror)\n\n;; ----------------------------------------\n;; Enable Mac-specific Environment Settings\n;; ----------------------------------------\n\n;; Let init-macos.el to work\n;;(load (expand-file-name \"init-macos.el\" user-emacs-directory))\n\n;; -----------------\n;; Visual Appearance\n;; -----------------\n;;(set-face-attribute 'default nil :font \"Monaco-17\")\n(use-package doom-themes\n  :ensure t\n  :config\n  (load-theme 'doom-one t))\n\n;;(set-face-attribute 'default nil :font \"Monaco-17\")\n;; HiDPI-aware dynamic font setup (GUI) + fallback (TTY)\n(defun my/setup-font-based-on-resolution ()\n  \"Adjust font size automatically based on display resolution, with terminal fallback.\"\n  (interactive)\n  (if (display-graphic-p)\n      (let* ((display-width (display-pixel-width))\n             (font-profiles '((3000 . (:font \"Monaco\" :size 200))\n                              (2500 . (:font \"Monaco\" :size 190))\n                              (1920 . (:font \"Monaco\" :size 180))\n                              (0    . (:font \"Monaco\" :size 170))))\n             (selected-profile\n              (cl-loop for (min-width . settings) in font-profiles\n                       when (&gt; display-width min-width)\n                       return settings)))\n        (when selected-profile\n          (let ((font-name (plist-get selected-profile :font))\n                (font-size (plist-get selected-profile :size)))\n            (set-face-attribute 'default nil :font font-name :height font-size)\n            (message \"GUI: Font set to %s (%d)\" font-name font-size))))\n    ;; fallback for terminal mode\n    (set-face-attribute 'default nil :height 130)\n    (message \"TTY: Default font height set to 130\")))\n\n;; Apply after GUI is ready\n(add-hook 'window-setup-hook #'my/setup-font-based-on-resolution)\n\n(global-display-line-numbers-mode 1)\n(global-visual-line-mode 1)\n\n;; ----------------------------\n;; General Editing Enhancements\n;; ----------------------------\n(use-package smex\n  :bind (\"M-x\" . smex))\n\n(use-package smartparens\n  :config\n  (smartparens-global-mode t)\n  (show-smartparens-global-mode t)\n  (sp-pair \"\\\\[\" \"\\\\]\"))\n\n(use-package rainbow-delimiters\n  :hook (prog-mode . rainbow-delimiters-mode))\n\n(use-package rainbow-identifiers\n  :hook ((prog-mode latex-mode LaTeX-mode) . rainbow-identifiers-mode))\n\n(use-package adaptive-wrap\n  :hook (visual-line-mode . adaptive-wrap-prefix-mode)\n  :config\n  (setq-default adaptive-wrap-extra-indent 0))\n\n(use-package visual-fill-column\n  :config\n  (setq-default fill-column 99999))\n\n;; -------------------------------\n;; ðŸ”¤ Spell Checking & Dictionary\n;; -------------------------------\n(setq ispell-program-name \"aspell\") \n(setq ispell-dictionary \"en\")       ;; default dictionary\n\n;; Enable Flyspell in text and org modes\n(dolist (hook '(text-mode-hook org-mode-hook))\n  (add-hook hook 'flyspell-mode))\n\n;; Optional: enable in comments for code\n(add-hook 'prog-mode-hook 'flyspell-prog-mode)\n\n;; Set correction keybinding (use M-$ to check word)\n(global-set-key (kbd \"C-;\") 'flyspell-correct-wrapper)\n\n(use-package flyspell\n  :ensure t\n  :hook ((text-mode . flyspell-mode)\n         (org-mode  . flyspell-mode)\n         (prog-mode . flyspell-prog-mode))\n  :config\n  (setq ispell-program-name \"aspell\"\n        ispell-dictionary \"en\"))\n\n(use-package flyspell-correct\n  :ensure t\n  :after flyspell\n  :bind (:map flyspell-mode-map\n              (\"C-;\" . flyspell-correct-wrapper)))\n\n;; ---------------------\n;; ðŸ“’ Org Mode Enhancements\n;; ---------------------\n(use-package org\n  :ensure t\n  :hook ((org-mode . org-indent-mode)\n         (org-mode . visual-line-mode))\n  :config\n  (setq org-log-done 'time                          ; Log time when TODOs are marked done\n        org-startup-folded t                        ; Start with sections folded\n        org-icalendar-include-todo t                ; Include TODOs in iCalendar export\n        org-hide-emphasis-markers t                 ; Hide *bold*, /italic/, etc.\n        org-pretty-entities t                       ; Show LaTeX-like entities as UTF symbols\n        org-return-follows-link t))                 ; Enter follows links\n\n;; -----------------\n;; ðŸ§  Org-roam Setup\n;; -----------------\n(use-package org-roam\n  :ensure t\n  :init\n  (setq org-roam-v2-ack t)\n  :custom\n  (org-roam-directory (file-truename \"~/Dropbox/org/roam/\"))\n  (org-roam-dailies-directory \"daily/\")\n  (org-roam-completion-everywhere t)\n  (org-roam-capture-templates\n   '((\"d\" \"default\" plain\n      \"%?\"\n      :target (file+head \"%&lt;%Y%m%d%H%M%S&gt;-${slug}.org\"\n                         \"#+title: ${title}\\n#+date: %U\\n\")\n      :unnarrowed t)))\n  (org-roam-dailies-capture-templates\n   '((\"d\" \"daily\" entry\n      \"* %?\"\n      :target (file+head \"%&lt;%Y-%m-%d&gt;.org\"\n                         \"#+title: %&lt;%Y-%m-%d&gt;\\n#+date: %U\\n\\n\"))))\n  :bind ((\"C-c n l\" . org-roam-buffer-toggle)\n         (\"C-c n f\" . org-roam-node-find)\n         (\"C-c n i\" . org-roam-node-insert)\n         (\"C-c n d\" . org-roam-dailies-capture-today)\n         (\"C-c n t\" . org-roam-dailies-goto-today))\n  :config\n  (org-roam-db-autosync-enable))\n\n;; -------------------------------------------\n;; LaTeX / AUCTeX + latexmk on MacOSX\n;; -------------------------------------------\n\n(use-package tex\n  :ensure auctex\n  :defer t\n  :hook (LaTeX-mode . my/latex-setup)\n  :config\n  (setq TeX-auto-save t\n        TeX-parse-self t\n        TeX-save-query nil\n        TeX-PDF-mode t\n        TeX-source-correlate-mode t\n        TeX-source-correlate-method 'synctex)\n\n  ;; Set default viewer to Skim or Preview.app\n  (setq TeX-view-program-selection\n        '(((output-pdf \"PDF Viewer\"))))\n\n  ;; Skim version (with SyncTeX)\n  ;; You can switch \"PDF Viewer\" below to \"Preview.app\" if you prefer\n  (setq TeX-view-program-list\n        '((\"PDF Viewer\" \"/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b\")))\n\n  ;; Preview.app version â€” open default Preview.app instead:\n  ;; (setq TeX-view-program-list\n  ;;       '((\"PDF Viewer\" \"open -a Preview.app %o\")))\n\n  ;; Add latexmk command\n  (add-to-list 'TeX-command-list\n               '(\"LatexMk\"\n                 \"latexmk -pdf -synctex=1 -interaction=nonstopmode %s\"\n                 TeX-run-TeX nil t\n                 :help \"Run latexmk for PDF output\"))\n\n  ;; Make latexmk the default compile command\n  (setq TeX-command-default \"LatexMk\"))\n\n(defun my/latex-setup ()\n  \"My custom LaTeX setup.\"\n  (turn-on-reftex)\n  (setq reftex-plug-into-AUCTeX t)\n  (flyspell-mode 1)\n  (LaTeX-math-mode 1)\n  (visual-line-mode 1))\n\n;; ---------------------------\n;; Company-mode\n;; ---------------------------\n(use-package company\n  :hook ((after-init . global-company-mode)\n         (LaTeX-mode . company-mode))\n  :config\n  (setq company-idle-delay 0.2\n        company-minimum-prefix-length 2\n        company-tooltip-align-annotations t\n        company-dabbrev-downcase nil))\n\n;; Auto-save\n(setq auto-save-visited-file-name t\n      auto-save-interval 100\n      auto-save-timeout 5)\n\n;; ----------------------\n;; Handy Custom Shortcuts\n;; ----------------------\n(setq debug-on-error t)\n(electric-indent-mode -1)\n\n;; Save current word to kill ring\n(global-set-key (kbd \"C-x w\")\n  (lambda ()\n    (interactive)\n    (save-excursion\n      (forward-char)\n      (backward-sexp)\n      (let ((pos (point)))\n        (forward-sexp)\n        (kill-ring-save pos (point))))))\n\n(provide 'init)",
    "crumbs": [
      "<span class='chapter-number'>1</span>Â  <span class='chapter-title'>`init.el`</span>"
    ]
  },
  {
    "objectID": "ch_2.html",
    "href": "ch_2.html",
    "title": "2Â  init-macos.el",
    "section": "",
    "text": "This is init-macos.el configuration for Emacs on MacOS.\nWe can save this directly as ~/.emacs.d/init-macos.el file.\n;; -----------------------------------------\n;; MacOS-Specific UI and Performance Tuning\n;; -----------------------------------------\n\n(use-package exec-path-from-shell\n  :if (memq window-system '(mac ns x))\n  :config\n  (exec-path-from-shell-initialize))\n\n;; Add MacPorts TeXLive + Hunspell paths\n(let ((my-paths '(\"/opt/local/libexec/texlive/texbin\"\n                  \"/opt/local/bin\")))\n  (setenv \"PATH\" (concat (mapconcat 'identity my-paths \":\") \":\" (getenv \"PATH\")))\n  (setq exec-path (append my-paths exec-path)))\n\n;; Use macOS dark appearance and transparent title bar (Cocoa only)\n(when (eq system-type 'darwin)\n  (add-to-list 'default-frame-alist '(ns-appearance . dark))\n  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))\n\n;; Retina/HiDPI: pixel-accurate frame resizing\n(setq frame-resize-pixelwise t)\n\n;; Start in maximized window (native fullscreen optional)\n(add-to-list 'default-frame-alist '(fullscreen . maximized))\n\n;; Improve font rendering for emoji/icons\n(set-fontset-font t 'symbol (font-spec :family \"Apple Color Emoji\") nil 'prepend)\n\n;; Better scrolling on Mac trackpads\n(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))\n(setq mouse-wheel-progressive-speed nil)\n(setq scroll-step 1)\n\n;; Use system clipboard and avoid pop-up dialog boxes\n(setq select-enable-clipboard t)\n(setq save-interprogram-paste-before-kill t)\n(setq use-dialog-box nil)\n\n;; Optional: Hide menu/tool/scroll bars (uncomment to activate)\n;; (menu-bar-mode -1)\n;; (tool-bar-mode -1)\n;; (scroll-bar-mode -1)\n\n;; Optional: Benchmark startup time\n(add-hook 'emacs-startup-hook\n          (lambda ()\n            (message \"âœ… Emacs ready in %.2f seconds with %d GCs.\"\n                     (float-time (time-subtract after-init-time before-init-time))\n                     gcs-done)))\n\n;; Optional: Reduce warnings and increase GC threshold during startup\n(setq native-comp-async-report-warnings-errors nil)\n(setq gc-cons-threshold (* 50 1000 1000))\n\n;; Japanese keyboard: input backslash with Â¥\n;;(define-key global-map [?Â¥] [?\\\\])",
    "crumbs": [
      "<span class='chapter-number'>2</span>Â  <span class='chapter-title'>`init-macos.el`</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Org-mode",
    "section": "",
    "text": "Preface\nUsing the Emacs platform and org-mode is an excellent means of taking daily notes and schedule.\nOrg-roam is a tool within Org-mode. Org-roam allows for effortless non-hierarchical note-taking: with Org-roam, notes flow naturally, making note-taking fun and easy. Org-roam augments the Org-mode syntax, and will work for anyone already using Org-mode for their personal wiki.\nOrg-roam leverages the mature ecosystem around Org-mode. For example, it has first-class support for org-ref for citation management, and is able to piggyback off Orgâ€™s excellent LaTeX and source-block evaluation capabilities.\nOrg-roam provides these benefits over other tooling:\n\nPrivacy and Security: Your personal wiki belongs only to you, entirely offline and in your control. Encrypt your notes with GPG.\nLongevity of Plain Text: Unlike web solutions like Roam Research, the notes are first and foremost plain Org-mode files â€“ Org-roam simply builds an auxiliary database to give the personal wiki superpowers. Having your notes in plain-text is crucial for the longevity of your wiki. Never have to worry about proprietary web solutions being taken down. The notes are still functional even if Org-roam ceases to exist.\nFree and Open Source: Org-roam is free and open-source, which means that if you feel unhappy with any part of Org-roam, you may choose to extend Org-roam, or open a pull request.\nLeverage the Org-mode ecosystem: Over the decades, Emacs and Org-mode has developed into a mature system for plain-text organization. Building upon Org-mode already puts Org-roam light-years ahead of many other solutions.\nBuilt on Emacs: Emacs is also a fantastic interface for editing text, and Org-roam inherits many of the powerful text-navigation and editing packages available to Emacs.",
    "crumbs": [
      "Preface"
    ]
  }
]