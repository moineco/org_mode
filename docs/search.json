[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Org-mode",
    "section": "",
    "text": "Preface\nUsing the Emacs platform and org-mode is an excellent means of taking daily notes and schedule.\nOrg-roam is a tool within Org-mode. Org-roam allows for effortless non-hierarchical note-taking: with Org-roam, notes flow naturally, making note-taking fun and easy. Org-roam augments the Org-mode syntax, and will work for anyone already using Org-mode for their personal wiki.\nOrg-roam leverages the mature ecosystem around Org-mode. For example, it has first-class support for org-ref for citation management, and is able to piggyback off Org’s excellent LaTeX and source-block evaluation capabilities.\nOrg-roam provides these benefits over other tooling:\n\nPrivacy and Security: Your personal wiki belongs only to you, entirely offline and in your control. Encrypt your notes with GPG.\nLongevity of Plain Text: Unlike web solutions like Roam Research, the notes are first and foremost plain Org-mode files – Org-roam simply builds an auxiliary database to give the personal wiki superpowers. Having your notes in plain-text is crucial for the longevity of your wiki. Never have to worry about proprietary web solutions being taken down. The notes are still functional even if Org-roam ceases to exist.\nFree and Open Source: Org-roam is free and open-source, which means that if you feel unhappy with any part of Org-roam, you may choose to extend Org-roam, or open a pull request.\nLeverage the Org-mode ecosystem: Over the decades, Emacs and Org-mode has developed into a mature system for plain-text organization. Building upon Org-mode already puts Org-roam light-years ahead of many other solutions.\nBuilt on Emacs: Emacs is also a fantastic interface for editing text, and Org-roam inherits many of the powerful text-navigation and editing packages available to Emacs.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "ch_1.html",
    "href": "ch_1.html",
    "title": "1  Directory structure",
    "section": "",
    "text": "This Emacs configuration is well-structured for writing (especially in LaTeX and Org-mode), and personal knowledge management (via Org-roam).\nI use this directly as ~/.emacs.d/init.el file.\n~/.emacs.d/\n├── init.el                    ;; Main entry point (already done)\n├── custom.el                  ;; User customizations\n├── backups/                   ;; Auto-created\n├── auto-saves/                ;; Auto-created\n└── lisp/\n    ├── init-ui.el             ;; Fonts, theme, visuals\n    ├── init-editing.el        ;; Smartparens, smex, wraps, spelling\n    ├── init-org.el            ;; Org-mode settings\n    ├── init-roam.el           ;; Org-roam config\n    ├── init-latex.el          ;; AUCTeX + latexmk setup\n    ├── init-company.el        ;; Company-mode auto-completion\n    └── init-macos.el          ;; macOS-specific setup\n\nPlace each file in ~/.emacs.d/lisp/\nKeep init.el in ~/.emacs.d/",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Directory structure</span>"
    ]
  },
  {
    "objectID": "ch_2.html",
    "href": "ch_2.html",
    "title": "2  init.el",
    "section": "",
    "text": "Keep init.el in ~/.emacs.d/\n\n;;; init.el --- Emacs Configuration Entry Point\n\n;; Load path for modular config files\n(add-to-list 'load-path (expand-file-name \"lisp\" user-emacs-directory))\n\n;; Load modules\n(require 'init-ui)\n(require 'init-editing)\n(require 'init-org)\n(require 'init-roam)\n(require 'init-latex)\n(require 'init-company)\n\n;; macOS-specific setup\n(when (eq system-type 'darwin)\n  (require 'init-macos))\n\n;;; init.el ends here\n(custom-set-variables\n ;; custom-set-variables was added by Custom.\n ;; If you edit it by hand, you could mess it up, so be careful.\n ;; Your init file should contain only one such instance.\n ;; If there is more than one, they won't work right.\n '(package-selected-packages nil))\n(custom-set-faces\n ;; custom-set-faces was added by Custom.\n ;; If you edit it by hand, you could mess it up, so be careful.\n ;; Your init file should contain only one such instance.\n ;; If there is more than one, they won't work right.\n )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>init.el</span>"
    ]
  },
  {
    "objectID": "ch_3.html",
    "href": "ch_3.html",
    "title": "3  init-ui.el",
    "section": "",
    "text": "Place the init-ui.el file in ~/.emacs.d/lisp/\n\n;;; init-ui.el --- Visual appearance and fonts\n\n(use-package doom-themes\n  :ensure t\n  :config\n  (condition-case nil\n      (load-theme 'doom-one t)\n    (error\n     (progn\n       (message \"doom-one not found, falling back to wombat theme.\")\n       (load-theme 'wombat t)))))\n\n(defun my/setup-font-based-on-resolution ()\n  \"Adjust font size automatically based on display resolution, with terminal fallback.\"\n  (interactive)\n  (if (display-graphic-p)\n      (let* ((display-width (display-pixel-width))\n             (font-profiles '((3000 . (:font \"Monaco\" :size 200))\n                              (2500 . (:font \"Monaco\" :size 190))\n                              (1920 . (:font \"Monaco\" :size 180))\n                              (0    . (:font \"Monaco\" :size 170))))\n             (selected-profile\n              (cl-loop for (min-width . settings) in font-profiles\n                       when (&gt; display-width min-width)\n                       return settings)))\n        (when selected-profile\n          (let ((font-name (plist-get selected-profile :font))\n                (font-size (plist-get selected-profile :size)))\n            (when (member font-name (font-family-list))\n              (set-face-attribute 'default nil :font font-name :height font-size)\n              (message \"GUI: Font set to %s (%d)\" font-name font-size)))))\n    ;; fallback for terminal mode\n    (set-face-attribute 'default nil :height 130)\n    (message \"TTY: Default font height set to 130\")))\n\n(add-hook 'window-setup-hook #'my/setup-font-based-on-resolution)\n\n(global-display-line-numbers-mode 1)\n(global-visual-line-mode 1)\n\n(provide 'init-ui)\n;;; init-ui.el ends here",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>init-ui.el</span>"
    ]
  },
  {
    "objectID": "ch_4.html",
    "href": "ch_4.html",
    "title": "4  init-editing.el",
    "section": "",
    "text": "Place the init-editing.el file in ~/.emacs.d/lisp/\n\n;;; init-editing.el --- General editing enhancements\n\n(use-package smex\n  :bind (\"M-x\" . smex))\n\n(use-package smartparens\n  :config\n  (smartparens-global-mode t)\n  (show-smartparens-global-mode t)\n  (sp-pair \"\\\\[\" \"\\\\]\"))\n\n(use-package rainbow-delimiters\n  :hook (prog-mode . rainbow-delimiters-mode))\n\n(use-package rainbow-identifiers\n  :hook ((prog-mode latex-mode LaTeX-mode) . rainbow-identifiers-mode))\n\n(use-package adaptive-wrap\n  :hook (visual-line-mode . adaptive-wrap-prefix-mode)\n  :config\n  (setq-default adaptive-wrap-extra-indent 0))\n\n(use-package visual-fill-column\n  :config\n  (setq-default fill-column 99999))\n\n;; Spell checking\n(setq ispell-program-name \"aspell\")\n(setq ispell-dictionary \"en\")\n\n(dolist (hook '(text-mode-hook org-mode-hook))\n  (add-hook hook 'flyspell-mode))\n(add-hook 'prog-mode-hook 'flyspell-prog-mode)\n\n(global-set-key (kbd \"C-;\") 'flyspell-correct-wrapper)\n\n(use-package flyspell\n  :ensure t\n  :hook ((text-mode . flyspell-mode)\n         (org-mode  . flyspell-mode)\n         (prog-mode . flyspell-prog-mode))\n  :config\n  (setq ispell-program-name \"aspell\"\n        ispell-dictionary \"en\"))\n\n(use-package flyspell-correct\n  :ensure t\n  :after flyspell\n  :bind (:map flyspell-mode-map\n              (\"C-;\" . flyspell-correct-wrapper)))\n\n;; Custom handy shortcut\n(setq debug-on-error t)\n(electric-indent-mode -1)\n\n(global-set-key (kbd \"C-x w\")\n  (lambda ()\n    (interactive)\n    (save-excursion\n      (forward-char)\n      (backward-sexp)\n      (let ((pos (point)))\n        (forward-sexp)\n        (kill-ring-save pos (point))))))\n\n(provide 'init-editing)\n;;; init-editing.el ends here",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>init-editing.el</span>"
    ]
  },
  {
    "objectID": "ch_5.html",
    "href": "ch_5.html",
    "title": "5  init-org.el",
    "section": "",
    "text": "Place the init-org.el file in ~/.emacs.d/lisp/\n\n;;; init-org.el --- Org mode configuration\n\n(use-package org\n  :ensure t\n  :hook ((org-mode . org-indent-mode)\n         (org-mode . visual-line-mode))\n  :config\n  (setq org-log-done 'time\n        org-startup-folded t\n        org-icalendar-include-todo t\n        org-hide-emphasis-markers t\n        org-pretty-entities t\n        org-return-follows-link t))\n\n;; Optional: modern org appearance\n(use-package org-modern\n  :ensure t\n  :hook (org-mode . org-modern-mode))\n\n(provide 'init-org)\n;;; init-org.el ends here",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>init-org.el</span>"
    ]
  }
]