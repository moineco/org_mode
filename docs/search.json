[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Org-mode",
    "section": "",
    "text": "Preface\nUsing the Emacs platform and org-mode is an excellent means of taking daily notes and schedule.\nOrg-roam is a tool within Org-mode. Org-roam allows for effortless non-hierarchical note-taking: with Org-roam, notes flow naturally, making note-taking fun and easy. Org-roam augments the Org-mode syntax, and will work for anyone already using Org-mode for their personal wiki.\nOrg-roam leverages the mature ecosystem around Org-mode. For example, it has first-class support for org-ref for citation management, and is able to piggyback off Org’s excellent LaTeX and source-block evaluation capabilities.\nOrg-roam provides these benefits over other tooling:\n\nPrivacy and Security: Your personal wiki belongs only to you, entirely offline and in your control. Encrypt your notes with GPG.\nLongevity of Plain Text: Unlike web solutions like Roam Research, the notes are first and foremost plain Org-mode files – Org-roam simply builds an auxiliary database to give the personal wiki superpowers. Having your notes in plain-text is crucial for the longevity of your wiki. Never have to worry about proprietary web solutions being taken down. The notes are still functional even if Org-roam ceases to exist.\nFree and Open Source: Org-roam is free and open-source, which means that if you feel unhappy with any part of Org-roam, you may choose to extend Org-roam, or open a pull request.\nLeverage the Org-mode ecosystem: Over the decades, Emacs and Org-mode has developed into a mature system for plain-text organization. Building upon Org-mode already puts Org-roam light-years ahead of many other solutions.\nBuilt on Emacs: Emacs is also a fantastic interface for editing text, and Org-roam inherits many of the powerful text-navigation and editing packages available to Emacs.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "ch_1.html",
    "href": "ch_1.html",
    "title": "1  Structure",
    "section": "",
    "text": "This Emacs configuration is well-structured for writing (especially in LaTeX and Org-mode), and personal knowledge management (via Org-roam).\nI use this directly as ~/.emacs.d/init.el file.\n~/.emacs.d/\n├── init.el                    ;; Main entry point (already done)\n├── custom.el                  ;; User customizations\n├── backups/                   ;; Auto-created\n├── auto-saves/                ;; Auto-created\n└── lisp/\n    ├── init-ui.el             ;; Fonts, theme, visuals\n    ├── init-editing.el        ;; Smartparens, smex, wraps, spelling\n    ├── init-org.el            ;; Org-mode settings\n    ├── init-roam.el           ;; Org-roam config\n    ├── init-latex.el          ;; AUCTeX + latexmk setup\n    ├── init-company.el        ;; Company-mode auto-completion\n    └── init-macos.el          ;; macOS-specific setup\n\nPlace each file in ~/.emacs.d/lisp/\nPlace init.el in ~/.emacs.d/\nPlace .latexmkrc in ~/.latexmkrc",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Structure</span>"
    ]
  },
  {
    "objectID": "ch_2.html",
    "href": "ch_2.html",
    "title": "2  init.el",
    "section": "",
    "text": "Keep init.el in ~/.emacs.d/\n\n;;; init.el --- Emacs Configuration Entry Point\n\n;; Load path for modular config files\n(add-to-list 'load-path (expand-file-name \"lisp\" user-emacs-directory))\n\n;; Load modules\n(require 'init-ui)\n(require 'init-editing)\n(require 'init-org)\n(require 'init-roam)\n(require 'init-latex)\n(require 'init-company)\n\n;; macOS-specific setup\n(when (eq system-type 'darwin)\n  (require 'init-macos))\n\n;; -----------------------------------------------\n;; 📦 Package Manager Setup (package.el + use-package)\n;; -----------------------------------------------\n\n(require 'package)\n(setq package-archives\n      '((\"melpa\"        . \"https://melpa.org/packages/\")\n        (\"melpa-stable\" . \"https://stable.melpa.org/packages/\")\n        (\"gnu\"          . \"https://elpa.gnu.org/packages/\")\n        (\"nongnu\"       . \"https://elpa.nongnu.org/nongnu/\")))\n\n;; (package-initialize)\n\n(unless package-archive-contents\n  (package-refresh-contents))\n\n;; -----------------------------------\n;; Save customization to separate file\n;; -----------------------------------\n(setq custom-file (expand-file-name \"custom.el\" user-emacs-directory))\n(load custom-file 'noerror)\n\n;;; init.el ends here",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>init.el</span>"
    ]
  },
  {
    "objectID": "ch_3.html",
    "href": "ch_3.html",
    "title": "3  init-ui.el",
    "section": "",
    "text": "Place the init-ui.el file in ~/.emacs.d/lisp/\n\n;;; init-ui.el --- Visual appearance and fonts\n\n(use-package doom-themes\n  :ensure t\n  :config\n  (condition-case nil\n      (load-theme 'doom-one t)\n    (error\n     (progn\n       (message \"doom-one not found, falling back to wombat theme.\")\n       (load-theme 'wombat t)))))\n\n(defun my/setup-font-based-on-resolution ()\n  \"Adjust font size automatically based on display resolution, with terminal fallback.\"\n  (interactive)\n  (if (display-graphic-p)\n      (let* ((display-width (display-pixel-width))\n             (font-profiles '((3000 . (:font \"Monaco\" :size 200))\n                              (2500 . (:font \"Monaco\" :size 190))\n                              (1920 . (:font \"Monaco\" :size 180))\n                              (0    . (:font \"Monaco\" :size 170))))\n             (selected-profile\n              (cl-loop for (min-width . settings) in font-profiles\n                       when (&gt; display-width min-width)\n                       return settings)))\n        (when selected-profile\n          (let ((font-name (plist-get selected-profile :font))\n                (font-size (plist-get selected-profile :size)))\n            (when (member font-name (font-family-list))\n              (set-face-attribute 'default nil :font font-name :height font-size)\n              (message \"GUI: Font set to %s (%d)\" font-name font-size)))))\n    ;; fallback for terminal mode\n    (set-face-attribute 'default nil :height 130)\n    (message \"TTY: Default font height set to 130\")))\n\n(add-hook 'window-setup-hook #'my/setup-font-based-on-resolution)\n\n(global-display-line-numbers-mode 1)\n(global-visual-line-mode 1)\n\n(provide 'init-ui)\n;;; init-ui.el ends here",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>init-ui.el</span>"
    ]
  },
  {
    "objectID": "ch_4.html",
    "href": "ch_4.html",
    "title": "4  init-editing.el",
    "section": "",
    "text": "Place the init-editing.el file in ~/.emacs.d/lisp/\n\n;;; init-editing.el --- General editing enhancements\n\n(use-package smex\n  :bind (\"M-x\" . smex))\n\n(use-package smartparens\n  :config\n  (smartparens-global-mode t)\n  (show-smartparens-global-mode t)\n  (sp-pair \"\\\\[\" \"\\\\]\"))\n\n(use-package rainbow-delimiters\n  :hook (prog-mode . rainbow-delimiters-mode))\n\n(use-package rainbow-identifiers\n  :hook ((prog-mode latex-mode LaTeX-mode) . rainbow-identifiers-mode))\n\n(use-package adaptive-wrap\n  :hook (visual-line-mode . adaptive-wrap-prefix-mode)\n  :config\n  (setq-default adaptive-wrap-extra-indent 0))\n\n(use-package visual-fill-column\n  :config\n  (setq-default fill-column 99999))\n\n;; Spell checking\n(setq ispell-program-name \"aspell\")\n(setq ispell-dictionary \"en\")\n\n(dolist (hook '(text-mode-hook org-mode-hook))\n  (add-hook hook 'flyspell-mode))\n(add-hook 'prog-mode-hook 'flyspell-prog-mode)\n\n(global-set-key (kbd \"C-;\") 'flyspell-correct-wrapper)\n\n(use-package flyspell\n  :ensure t\n  :hook ((text-mode . flyspell-mode)\n         (org-mode  . flyspell-mode)\n         (prog-mode . flyspell-prog-mode))\n  :config\n  (setq ispell-program-name \"aspell\"\n        ispell-dictionary \"en\"))\n\n(use-package flyspell-correct\n  :ensure t\n  :after flyspell\n  :bind (:map flyspell-mode-map\n              (\"C-;\" . flyspell-correct-wrapper)))\n\n;; Custom handy shortcut\n(setq debug-on-error t)\n(electric-indent-mode -1)\n\n(global-set-key (kbd \"C-x w\")\n  (lambda ()\n    (interactive)\n    (save-excursion\n      (forward-char)\n      (backward-sexp)\n      (let ((pos (point)))\n        (forward-sexp)\n        (kill-ring-save pos (point))))))\n\n(provide 'init-editing)\n;;; init-editing.el ends here",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>init-editing.el</span>"
    ]
  },
  {
    "objectID": "ch_5.html",
    "href": "ch_5.html",
    "title": "5  init-org.el",
    "section": "",
    "text": "Place the init-org.el file in ~/.emacs.d/lisp/\n\n;;; init-org.el --- Org mode configuration\n\n(use-package org\n  :ensure t\n  :hook ((org-mode . org-indent-mode)\n         (org-mode . visual-line-mode))\n  :config\n  (setq org-log-done 'time\n        org-startup-folded t\n        org-icalendar-include-todo t\n        org-hide-emphasis-markers t\n        org-pretty-entities t\n        org-return-follows-link t))\n\n;; Optional: modern org appearance\n(use-package org-modern\n  :ensure t\n  :hook (org-mode . org-modern-mode))\n\n(provide 'init-org)\n;;; init-org.el ends here",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>init-org.el</span>"
    ]
  },
  {
    "objectID": "ch_6.html",
    "href": "ch_6.html",
    "title": "6  init-roam.el",
    "section": "",
    "text": "Place the init-roam.el file in ~/.emacs.d/lisp/\n\n;;; init-roam.el --- Org-roam setup\n\n(use-package org-roam\n  :ensure t\n  :init\n  (setq org-roam-v2-ack t)\n  :custom\n  (org-roam-directory (file-truename \"~/MEGA/org/roam/\"))\n  (org-roam-dailies-directory \"daily/\")\n  (org-roam-completion-everywhere t)\n  (org-roam-capture-templates\n   '((\"d\" \"default\" plain\n      \"%?\"\n      :target (file+head \"%&lt;%Y%m%d%H%M%S&gt;-${slug}.org\"\n                         \"#+title: ${title}\\n#+date: %U\\n\")\n      :unnarrowed t)))\n  (org-roam-dailies-capture-templates\n   '((\"d\" \"daily\" entry\n      \"* %?\"\n      :target (file+head \"%&lt;%Y-%m-%d&gt;.org\"\n                         \"#+title: %&lt;%Y-%m-%d&gt;\\n#+date: %U\\n\\n\"))))\n  :bind (\"C-c n l\" . org-roam-buffer-toggle)\n        (\"C-c n f\" . org-roam-node-find)\n        (\"C-c n i\" . org-roam-node-insert)\n        (\"C-c n d\" . org-roam-dailies-capture-today)\n        (\"C-c n t\" . org-roam-dailies-goto-today)\n  :config\n  (org-roam-db-autosync-enable))\n\n(provide 'init-roam)\n;;; init-roam.el ends here",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>init-roam.el</span>"
    ]
  },
  {
    "objectID": "ch_7.html",
    "href": "ch_7.html",
    "title": "7  init-latex.el",
    "section": "",
    "text": "Place the init-latex.el file in ~/.emacs.d/lisp/\n\n;;; init-latex.el --- LaTeX / AUCTeX + latexmk configuration\n\n(use-package tex\n  :ensure auctex\n  :defer t\n  :hook (LaTeX-mode . my/latex-setup)\n  :config\n  (setq TeX-auto-save t\n        TeX-parse-self t\n        TeX-save-query nil\n        TeX-PDF-mode t\n        TeX-source-correlate-mode t\n        TeX-source-correlate-method 'synctex)\n\n  (setq TeX-view-program-selection\n        '(((output-pdf \"PDF Viewer\"))))\n\n  ;; Use Skim with SyncTeX or fallback to Preview.app\n  (setq TeX-view-program-list\n        '((\"PDF Viewer\" \"/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b\")))\n\n  (add-to-list 'TeX-command-list\n               '(\"LatexMk\"\n                 \"latexmk -pdf -synctex=1 -interaction=nonstopmode %s\"\n                 TeX-run-TeX nil t\n                 :help \"Run latexmk for PDF output\"))\n\n  (setq TeX-command-default \"LatexMk\"))\n\n(defun my/latex-setup ()\n  \"My custom LaTeX setup.\"\n  (turn-on-reftex)\n  (setq reftex-plug-into-AUCTeX t)\n  (flyspell-mode 1)\n  (LaTeX-math-mode 1)\n  (visual-line-mode 1))\n\n(provide 'init-latex)\n;;; init-latex.el ends here",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>init-latex.el</span>"
    ]
  },
  {
    "objectID": "ch_8.html",
    "href": "ch_8.html",
    "title": "8  init-company.el",
    "section": "",
    "text": "Place the init-company.el file in ~/.emacs.d/lisp/\n\n;;; init-company.el --- Company-mode configuration\n\n(use-package company\n  :hook ((after-init . global-company-mode)\n         (LaTeX-mode . company-mode))\n  :config\n  (setq company-idle-delay 0.2\n        company-minimum-prefix-length 2\n        company-tooltip-align-annotations t\n        company-dabbrev-downcase nil))\n\n(provide 'init-company)\n;;; init-company.el ends here",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>init-company.el</span>"
    ]
  },
  {
    "objectID": "ch_9.html",
    "href": "ch_9.html",
    "title": "9  init-macos.el",
    "section": "",
    "text": "Place the init-macos.el file in ~/.emacs.d/lisp/\n\n;; -----------------------------------------\n;; 🍎 MacOS-Specific Setup for Emacs\n;; -----------------------------------------\n\n;; 🧠 Startup: Performance tuning\n(setq native-comp-async-report-warnings-errors nil) ; silence native-comp warnings\n(setq gc-cons-threshold (* 50 1000 1000))           ; increase GC threshold for faster startup\n\n(add-hook 'emacs-startup-hook\n          (lambda ()\n            (message \"✅ Emacs ready in %.2f seconds with %d GCs.\"\n                     (float-time (time-subtract after-init-time before-init-time))\n                     gcs-done)))\n\n;; 📦 Environment: Mac shell paths\n(use-package exec-path-from-shell\n  :if (memq window-system '(mac ns x))\n  :config\n  (exec-path-from-shell-initialize))\n\n;; Add MacPorts paths for TeXLive and Hunspell\n(let ((my-paths '(\"/opt/local/libexec/texlive/texbin\"\n                  \"/opt/local/bin\")))\n  (setenv \"PATH\" (concat (mapconcat #'identity my-paths \":\") \":\" (getenv \"PATH\")))\n  (setq exec-path (append my-paths exec-path)))\n\n;; 🎨 Visuals: Theme, font, retina, fullscreen\n(when (eq system-type 'darwin)\n  ;; Prefer dark mode and unified title bar\n  (add-to-list 'default-frame-alist '(ns-appearance . dark))\n  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))\n\n(setq frame-resize-pixelwise t)                             ; Retina/HiDPI fix\n(add-to-list 'default-frame-alist '(fullscreen . maximized)) ; Start maximized\n(set-fontset-font t 'symbol (font-spec :family \"Apple Color Emoji\") nil 'prepend)\n\n;; 🖱️ Mouse & Trackpad: Smooth scrolling\n(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ; 1 line at a time\n(setq mouse-wheel-progressive-speed nil)\n(setq scroll-step 1)\n\n;; 📋 Clipboard and Input\n(setq select-enable-clipboard t)\n(setq save-interprogram-paste-before-kill t)\n(setq use-dialog-box nil) ; no popups\n\n;; Optional: Better Japanese keyboard handling (¥ = \\)\n;; (define-key global-map [?¥] [?\\\\])\n\n;; 🧼 UI Hygiene (uncomment if desired)\n;; (menu-bar-mode -1)\n;; (tool-bar-mode -1)\n;; (scroll-bar-mode -1)\n\n(provide 'init-macos)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>init-macos.el</span>"
    ]
  },
  {
    "objectID": "ch_10.html",
    "href": "ch_10.html",
    "title": "10  latexmkrc",
    "section": "",
    "text": "Place .latexmkrc in ~/.latexmkrc\n\n# Generate pdf using pdflatex (-pdf)\n$pdf_mode=1;\n\n# Use bibtex if a .bib file exists\n$bibtex_use=1;\n\n# Define command to compile with pdfsync support and nonstopmode\n$pdflatex= 'pdflatex -synctex=1 --interaction=nonstopmode -file-line-error';\n\n# Continous compiling\n$preview_continuous_mode=1;",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>latexmkrc</span>"
    ]
  },
  {
    "objectID": "ch_11.html",
    "href": "ch_11.html",
    "title": "11  Simple org-roam setup",
    "section": "",
    "text": ";;; init.el --- Emacs config Org-roam-based daily notes\n\n;; ---------------------\n;; 📦 Package Management\n;; ---------------------\n(require 'package)\n\n(setq package-enable-at-startup nil)\n\n;; Add multiple reputable package archives\n(setq package-archives\n      '((\"melpa\"        . \"https://melpa.org/packages/\")\n        (\"melpa-stable\" . \"https://stable.melpa.org/packages/\")\n        (\"gnu\"          . \"https://elpa.gnu.org/packages/\")\n        (\"nongnu\"       . \"https://elpa.nongnu.org/nongnu/\")\n        (\"org\"          . \"https://orgmode.org/elpa/\")))\n\n(package-initialize)\n\n(unless (package-installed-p 'use-package)\n  (package-refresh-contents)\n  (package-install 'use-package))\n\n(require 'use-package)\n(setq use-package-always-ensure t)\n\n;; ---------------------------------------\n;; 📚 Org-mode Setup (with macOS bindings)\n;; ---------------------------------------\n(use-package org\n  :ensure t\n  :hook ((org-mode . visual-line-mode)\n         (org-mode . variable-pitch-mode))\n  :bind ((\"C-c c\" . org-capture)         ;; Org capture shortcut\n         :map org-mode-map\n         (\"s-d\" . org-deadline)          ;; ⌘ + d → set deadline\n         (\"s-s\" . org-schedule)          ;; ⌘ + s → schedule\n         (\"s-a\" . org-agenda))           ;; ⌘ + a → agenda\n  :config\n  (setq org-directory \"~/org/\")\n  (setq org-agenda-files '(\"~/org/\"))\n  (setq org-log-done 'time)\n  (setq org-startup-indented t)\n  (setq org-hide-emphasis-markers t)\n  (setq org-startup-with-inline-images t)\n  (setq org-deadline-warning-days 7)\n  (setq org-agenda-span 'week)\n  (setq org-read-date-popup-calendar t)\n  (setq calendar-week-start-day 1))\n\n;; ---------------------------------------\n;; 🧠 Org-roam Setup\n;; ---------------------------------------\n(use-package org-roam\n  :ensure t\n  :init\n  (setq org-roam-v2-ack t)\n  :custom\n  (org-roam-directory (file-truename \"~/MEGA/org/roam/\"))\n  (org-roam-dailies-directory \"daily/\")\n  (org-roam-completion-everywhere t)\n  (org-roam-capture-templates\n   '((\"d\" \"default\" plain\n      \"%?\"\n      :target (file+head \"%&lt;%Y%m%d%H%M%S&gt;-${slug}.org\"\n                         \"#+title: ${title}\\n#+date: %U\\n\")\n      :unnarrowed t)))\n  (org-roam-dailies-capture-templates\n   '((\"d\" \"daily\" entry\n      \"* %?\"\n      :target (file+head \"%&lt;%Y-%m-%d&gt;.org\"\n                         \"#+title: %&lt;%Y-%m-%d&gt;\\n#+date: %U\\n\\n\"))))\n  :bind ((\"C-c n l\" . org-roam-buffer-toggle)\n         (\"C-c n f\" . org-roam-node-find)\n         (\"C-c n i\" . org-roam-node-insert)\n         (\"C-c n d\" . org-roam-dailies-capture-today)\n         (\"C-c n t\" . org-roam-dailies-goto-today))\n  :config\n  (org-roam-db-autosync-enable))\n\n;; -------------------------------\n;; 💡 Visual Enhancements\n;; -------------------------------\n(use-package org-bullets\n  :hook (org-mode . org-bullets-mode))\n\n(use-package visual-fill-column\n  :hook (org-mode . visual-fill-column-mode)\n  :config\n  (setq visual-fill-column-width 100\n        visual-fill-column-center-text t))\n\n(use-package solarized-theme\n  :config\n  (load-theme 'solarized-dark t))\n\n(global-display-line-numbers-mode 1)\n(add-hook 'org-mode-hook (lambda () (display-line-numbers-mode 0)))\n\n;; Optional: Nicer Org UI\n(use-package org-modern\n  :config (global-org-modern-mode))\n\n(use-package org-appear\n  :hook (org-mode . org-appear-mode))\n\n;; -------------------------------\n;; 🖥️ macOS Enhancements and Font\n;; -------------------------------\n(when (eq system-type 'darwin)\n  ;; Set font size to 18pt and background to black\n  (add-to-list 'default-frame-alist '(font . \"Menlo-18\"))\n  (add-to-list 'default-frame-alist '(background-color . \"black\"))\n  (add-to-list 'default-frame-alist '(foreground-color . \"white\"))\n  (setq mac-option-modifier 'meta)\n  (setq mac-command-modifier 'super)\n  (setq mac-right-option-modifier nil))\n\n;; -------------------------------\n;; 🔤 Spell Checking & Dictionary\n;; -------------------------------\n(setq ispell-program-name \"aspell\")\n(setq ispell-dictionary \"en\")       ;; default dictionary\n\n;; Enable Flyspell in text and org modes\n(dolist (hook '(text-mode-hook org-mode-hook))\n  (add-hook hook 'flyspell-mode))\n\n;; Optional: enable in comments for code\n(add-hook 'prog-mode-hook 'flyspell-prog-mode)\n\n;; Set correction keybinding (use M-$ to check word)\n(global-set-key (kbd \"C-;\") 'flyspell-correct-wrapper)\n\n(use-package flyspell\n  :ensure t\n  :hook ((text-mode . flyspell-mode)\n         (org-mode  . flyspell-mode)\n         (prog-mode . flyspell-prog-mode))\n  :config\n  (setq ispell-program-name \"aspell\"\n        ispell-dictionary \"en\"))\n\n(provide 'init)\n;;; init.el ends here\n(custom-set-variables\n ;; custom-set-variables was added by Custom.\n ;; If you edit it by hand, you could mess it up, so be careful.\n ;; Your init file should contain only one such instance.\n ;; If there is more than one, they won't work right.\n '(package-selected-packages nil))\n(custom-set-faces\n ;; custom-set-faces was added by Custom.\n ;; If you edit it by hand, you could mess it up, so be careful.\n ;; Your init file should contain only one such instance.\n ;; If there is more than one, they won't work right.\n )",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Simple org-roam setup</span>"
    ]
  }
]