# `init.el` 

This is init.el configuration for Emacs on MacOS using Org-roam.

We can save this directly as `~/.emacs.d/init.el` file.


```default
;;;;;;;;;;;;;;;;;;;;;;;;
;; Emacs init.el
;; Platform: MacOSX
;; Author: Moinul Islam
;;;;;;;;;;;;;;;;;;;;;;;

;; -----------------------------------------------
;; Package Manager Setup (package.el + use-package)
;; -----------------------------------------------
(require 'package)
(setq package-archives
       '(("melpa"       . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")
        ("gnu"          . "https://elpa.gnu.org/packages/")
        ("nongnu"       . "https://elpa.nongnu.org/nongnu/")
        ("org"          . "https://orgmode.org/elpa/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(setq use-package-always-ensure t)

;; -----------------------------------
;; Save customization to separate file
;; -----------------------------------
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)

;; ----------------------------------------
;; Enable Mac-specific Environment Settings
;; ----------------------------------------

;; Let init-macos.el to work
;;(load (expand-file-name "init-macos.el" user-emacs-directory))

;; -----------------
;; Visual Appearance
;; -----------------
;;(set-face-attribute 'default nil :font "Monaco-17")
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-one t))

;;(set-face-attribute 'default nil :font "Monaco-17")
;; HiDPI-aware dynamic font setup (GUI) + fallback (TTY)
(defun my/setup-font-based-on-resolution ()
  "Adjust font size automatically based on display resolution, with terminal fallback."
  (interactive)
  (if (display-graphic-p)
      (let* ((display-width (display-pixel-width))
             (font-profiles '((3000 . (:font "Monaco" :size 200))
                              (2500 . (:font "Monaco" :size 190))
                              (1920 . (:font "Monaco" :size 180))
                              (0    . (:font "Monaco" :size 170))))
             (selected-profile
              (cl-loop for (min-width . settings) in font-profiles
                       when (> display-width min-width)
                       return settings)))
        (when selected-profile
          (let ((font-name (plist-get selected-profile :font))
                (font-size (plist-get selected-profile :size)))
            (set-face-attribute 'default nil :font font-name :height font-size)
            (message "GUI: Font set to %s (%d)" font-name font-size))))
    ;; fallback for terminal mode
    (set-face-attribute 'default nil :height 130)
    (message "TTY: Default font height set to 130")))

;; Apply after GUI is ready
(add-hook 'window-setup-hook #'my/setup-font-based-on-resolution)

(global-display-line-numbers-mode 1)
(global-visual-line-mode 1)

;; ----------------------------
;; General Editing Enhancements
;; ----------------------------
(use-package smex
  :bind ("M-x" . smex))

(use-package smartparens
  :config
  (smartparens-global-mode t)
  (show-smartparens-global-mode t)
  (sp-pair "\\[" "\\]"))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rainbow-identifiers
  :hook ((prog-mode latex-mode LaTeX-mode) . rainbow-identifiers-mode))

(use-package adaptive-wrap
  :hook (visual-line-mode . adaptive-wrap-prefix-mode)
  :config
  (setq-default adaptive-wrap-extra-indent 0))

(use-package visual-fill-column
  :config
  (setq-default fill-column 99999))

;; -------------------------------
;; ðŸ”¤ Spell Checking & Dictionary
;; -------------------------------
(setq ispell-program-name "aspell") 
(setq ispell-dictionary "en")       ;; default dictionary

;; Enable Flyspell in text and org modes
(dolist (hook '(text-mode-hook org-mode-hook))
  (add-hook hook 'flyspell-mode))

;; Optional: enable in comments for code
(add-hook 'prog-mode-hook 'flyspell-prog-mode)

;; Set correction keybinding (use M-$ to check word)
(global-set-key (kbd "C-;") 'flyspell-correct-wrapper)

(use-package flyspell
  :ensure t
  :hook ((text-mode . flyspell-mode)
         (org-mode  . flyspell-mode)
         (prog-mode . flyspell-prog-mode))
  :config
  (setq ispell-program-name "aspell"
        ispell-dictionary "en"))

(use-package flyspell-correct
  :ensure t
  :after flyspell
  :bind (:map flyspell-mode-map
              ("C-;" . flyspell-correct-wrapper)))

;; ---------------------
;; ðŸ“’ Org Mode Enhancements
;; ---------------------
(use-package org
  :ensure t
  :hook ((org-mode . org-indent-mode)
         (org-mode . visual-line-mode))
  :config
  (setq org-log-done 'time                          ; Log time when TODOs are marked done
        org-startup-folded t                        ; Start with sections folded
        org-icalendar-include-todo t                ; Include TODOs in iCalendar export
        org-hide-emphasis-markers t                 ; Hide *bold*, /italic/, etc.
        org-pretty-entities t                       ; Show LaTeX-like entities as UTF symbols
        org-return-follows-link t))                 ; Enter follows links

;; -----------------
;; ðŸ§  Org-roam Setup
;; -----------------
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "~/Dropbox/org/roam/"))
  (org-roam-dailies-directory "daily/")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                         "#+title: ${title}\n#+date: %U\n")
      :unnarrowed t)))
  (org-roam-dailies-capture-templates
   '(("d" "daily" entry
      "* %?"
      :target (file+head "%<%Y-%m-%d>.org"
                         "#+title: %<%Y-%m-%d>\n#+date: %U\n\n"))))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n d" . org-roam-dailies-capture-today)
         ("C-c n t" . org-roam-dailies-goto-today))
  :config
  (org-roam-db-autosync-enable))

;; -------------------------------------------
;; LaTeX / AUCTeX + latexmk on MacOSX
;; -------------------------------------------

(use-package tex
  :ensure auctex
  :defer t
  :hook (LaTeX-mode . my/latex-setup)
  :config
  (setq TeX-auto-save t
        TeX-parse-self t
        TeX-save-query nil
        TeX-PDF-mode t
        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex)

  ;; Set default viewer to Skim or Preview.app
  (setq TeX-view-program-selection
        '(((output-pdf "PDF Viewer"))))

  ;; Skim version (with SyncTeX)
  ;; You can switch "PDF Viewer" below to "Preview.app" if you prefer
  (setq TeX-view-program-list
        '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

  ;; Preview.app version â€” open default Preview.app instead:
  ;; (setq TeX-view-program-list
  ;;       '(("PDF Viewer" "open -a Preview.app %o")))

  ;; Add latexmk command
  (add-to-list 'TeX-command-list
               '("LatexMk"
                 "latexmk -pdf -synctex=1 -interaction=nonstopmode %s"
                 TeX-run-TeX nil t
                 :help "Run latexmk for PDF output"))

  ;; Make latexmk the default compile command
  (setq TeX-command-default "LatexMk"))

(defun my/latex-setup ()
  "My custom LaTeX setup."
  (turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (flyspell-mode 1)
  (LaTeX-math-mode 1)
  (visual-line-mode 1))

;; ---------------------------
;; Company-mode
;; ---------------------------
(use-package company
  :hook ((after-init . global-company-mode)
         (LaTeX-mode . company-mode))
  :config
  (setq company-idle-delay 0.2
        company-minimum-prefix-length 2
        company-tooltip-align-annotations t
        company-dabbrev-downcase nil))

;; Auto-save
(setq auto-save-visited-file-name t
      auto-save-interval 100
      auto-save-timeout 5)

;; ----------------------
;; Handy Custom Shortcuts
;; ----------------------
(setq debug-on-error t)
(electric-indent-mode -1)

;; Save current word to kill ring
(global-set-key (kbd "C-x w")
  (lambda ()
    (interactive)
    (save-excursion
      (forward-char)
      (backward-sexp)
      (let ((pos (point)))
        (forward-sexp)
        (kill-ring-save pos (point))))))

(provide 'init)
```

